from crud import *

# Listas simulando bancos de dados para armazenar os registros do sistema
clientes = []
veiculos = []
oficinas = []
funcionarios = []
estoque = []
servicos_agendados = []

# Fun√ß√£o para exibir subt√≠tulos com espa√ßamento
def exibir_subtitulos(texto):
    print(texto)
    print()

# Fun√ß√£o para cadastrar clientes
def cadastrar_cliente():
    exibir_subtitulos("\nüìã **Cadastro de Clientes**\n")
    
    # Loop para garantir que o cadastro seja feito corretamente
    while True:
        try:
            # Solicita e valida o CPF
            cpf = input("Digite o CPF do cliente (11 d√≠gitos): ")
            if len(cpf) != 11:
                exibir_subtitulos("‚ö†Ô∏è O CPF deve ter exatamente 11 d√≠gitos.")
                continue
            
            # Verifica se o CPF j√° est√° cadastrado
            if any(cliente['CPF'] == cpf for cliente in clientes):
                exibir_subtitulos("‚ö†Ô∏è Este CPF j√° est√° cadastrado.")
                continue

            # Solicita os demais dados do cliente
            nome = input("Nome completo: ")
            email = input("Email: ")
            idade = int(input("Idade: "))
            telefone = input("N√∫mero de telefone: ")
            nome_usuario = input("Escolha um nome de usu√°rio: ")

            # Verifica se o nome de usu√°rio j√° est√° em uso
            if any(cliente['Usu√°rio'] == nome_usuario for cliente in clientes):
                exibir_subtitulos("‚ö†Ô∏è Este nome de usu√°rio j√° est√° em uso.")
                continue

            # Solicita e confirma a senha
            senha = input("Crie uma senha forte: ")
            senha_confirmada = input("Confirme a senha: ")

            # Verifica se as senhas coincidem
            if senha != senha_confirmada:
                exibir_subtitulos("‚ö†Ô∏è As senhas n√£o coincidem.")
                continue

            # Cria o dicion√°rio do cliente e o adiciona √† lista
            cliente = {
                "Nome": nome, 
                "Email": email, 
                "Idade": idade, 
                "CPF": cpf, 
                "Telefone": telefone, 
                "Usu√°rio": nome_usuario, 
                "Senha": senha
            }
            clientes.append(cliente)
            exibir_subtitulos(f"\nüéâ Cliente cadastrado com sucesso!\n{cliente}")
            break
        # Trata erros de convers√£o de tipo
        except ValueError as ve:
            exibir_subtitulos(f"‚ö†Ô∏è Erro: {ve}")
        # Trata qualquer outro tipo de exce√ß√£o
        except Exception as e:
            exibir_subtitulos(f"‚ö†Ô∏è Ocorreu um erro inesperado: {e}")

# Fun√ß√£o para cadastrar ve√≠culos
def cadastrar_veiculo():
    exibir_subtitulos("\nüöó **Cadastro de Ve√≠culos**\n")
    try:
        # Solicita os dados do ve√≠culo
        modelo = input("Modelo do ve√≠culo: ")

        # Loop para validar a placa do ve√≠culo
        while True:
            placa = input("Placa do ve√≠culo (7 caracteres): ")
            if len(placa) != 7:
                exibir_subtitulos("‚ö†Ô∏è A placa deve ter exatamente 7 caracteres.")
                continue
            # Verifica se a placa j√° est√° cadastrada
            elif any(veiculo['Placa'] == placa for veiculo in veiculos):
                exibir_subtitulos("‚ö†Ô∏è Esta placa j√° est√° cadastrada.")
                continue
            else:
                break

        # Solicita a cor do ve√≠culo e o cadastra na lista de ve√≠culos
        cor = input("Cor do ve√≠culo: ")
        veiculo = {"Modelo": modelo, "Placa": placa, "Cor": cor}
        veiculos.append(veiculo)
        exibir_subtitulos(f"\nüéâ Ve√≠culo cadastrado com sucesso!\n{veiculo}")
    except Exception as e:
        exibir_subtitulos(f"‚ö†Ô∏è Ocorreu um erro inesperado: {e}")

# Fun√ß√£o para cadastrar oficinas
def cadastrar_oficina():
    exibir_subtitulos("\nüîß **Cadastro de Oficinas**\n")
    try:
        # Solicita os dados da oficina
        cep = input("CEP: ")
        endereco = input("Endere√ßo completo: ")
        nome_oficina = input("Nome da Oficina: ")
        telefone_oficina = input("N√∫mero de telefone: ")

        # Cria o dicion√°rio da oficina e o adiciona √† lista de oficinas
        oficina = {
            "CEP": cep, 
            "Endere√ßo": endereco, 
            "Nome da Oficina": nome_oficina, 
            "Telefone": telefone_oficina
        }
        oficinas.append(oficina)
        exibir_subtitulos(f"\nüéâ Oficina cadastrada com sucesso!\n{oficina}")
    except Exception as e:
        exibir_subtitulos(f"‚ö†Ô∏è Ocorreu um erro inesperado: {e}")

# Fun√ß√£o para cadastrar funcion√°rios
def cadastrar_funcionario():
    exibir_subtitulos("\nüë®‚Äçüíº **Cadastro de Funcion√°rios**\n")
    try:
        # Solicita os dados do funcion√°rio
        nome_funcionario = input("Nome completo: ")
        cargo = input("Cargo: ")
        data_contrata = input("Data de contrata√ß√£o (DD/MM/AAAA): ")
        salario = float(input("Sal√°rio (R$): "))
        setor = int(input("Setor: "))
        tempo_empresa = int(input("Tempo de empresa (em anos): "))

        # Cria o dicion√°rio do funcion√°rio e o adiciona √† lista de funcion√°rios
        funcionario = {
            "Nome": nome_funcionario,
            "Cargo": cargo,
            "Data de contrata√ß√£o": data_contrata,
            "Sal√°rio": salario,
            "Setor": setor,
            "Tempo de empresa": tempo_empresa
        }
        funcionarios.append(funcionario)
        exibir_subtitulos(f"\nüéâ Funcion√°rio cadastrado com sucesso!\n{funcionario}")
    # Trata erro de convers√£o de tipo
    except ValueError as ve:
        exibir_subtitulos(f"‚ö†Ô∏è Erro de valor: {ve}")
    # Trata qualquer outro tipo de exce√ß√£o
    except Exception as e:
        exibir_subtitulos(f"‚ö†Ô∏è Ocorreu um erro inesperado: {e}")

# Fun√ß√£o para gerenciar o estoque de pe√ßas
def gerenciar_estoque():
    exibir_subtitulos("\nüõ†Ô∏è **Gerenciamento de Estoque de Pe√ßas**\n")
    try:
        # Solicita os dados da pe√ßa
        nome_peca = input("Nome da pe√ßa: ")
        quant = int(input("Quantidade dispon√≠vel: "))
        preco = float(input("Pre√ßo unit√°rio (R$): "))
        fornecedor = input("Fornecedor: ")

        # Cria o dicion√°rio da pe√ßa e o adiciona ao estoque
        peca = {
            "Nome da Pe√ßa": nome_peca,
            "Quantidade Dispon√≠vel": quant,
            "Pre√ßo Unit√°rio": preco,
            "Fornecedor": fornecedor
        }
        estoque.append(peca)
        exibir_subtitulos(f"\nüéâ Estoque de pe√ßas atualizado com sucesso!\n{peca}")
    # Trata erro de convers√£o de tipo
    except ValueError as ve:
        exibir_subtitulos(f"‚ö†Ô∏è Erro de valor: {ve}")
    # Trata qualquer outro tipo de exce√ß√£o
    except Exception as e:
        exibir_subtitulos(f"‚ö†Ô∏è Ocorreu um erro inesperado: {e}")


# Fun√ß√£o para agendar servi√ßos de manuten√ß√£o
def agendar_manutencao():
    exibir_subtitulos("\nüóìÔ∏è **Agendamento de Servi√ßo de Manuten√ß√£o**\n")
    try:
        # Valida a placa do ve√≠culo
        while True:
            placa = input("Placa do ve√≠culo (7 caracteres): ")
            if len(placa) != 7:
                exibir_subtitulos("‚ö†Ô∏è A placa deve ter exatamente 7 caracteres.")
                continue
            elif not any(veiculo['Placa'] == placa for veiculo in veiculos):
                exibir_subtitulos("‚ö†Ô∏è Ve√≠culo n√£o encontrado. Verifique a placa e tente novamente.")
                continue
            else:
                break

        # Solicita e valida os demais dados do servi√ßo
        data = input("Data do servi√ßo (DD/MM/AAAA): ")
        horario = input("Hor√°rio do servi√ßo: ")
        cpf = input("CPF do cliente: ")

        # Verifica se o CPF do cliente est√° cadastrado
        if not any(cliente['CPF'] == cpf for cliente in clientes):
            exibir_subtitulos("‚ö†Ô∏è CPF do cliente n√£o encontrado. Verifique e tente novamente.")
            return

        descricao_servico = input("Descri√ß√£o do servi√ßo: ")

        # Cria o dicion√°rio do servi√ßo agendado e o adiciona √† lista
        servico = {
            "Data": data,
            "Hor√°rio": horario,
            "CPF": cpf,
            "Placa": placa,
            "Descri√ß√£o do Servi√ßo": descricao_servico
        }
        servicos_agendados.append(servico)
        exibir_subtitulos(f"\nüéâ Servi√ßo de manuten√ß√£o agendado com sucesso!\n{servico}")
    # Trata erro de convers√£o de tipo
    except ValueError as ve:
        exibir_subtitulos(f"‚ö†Ô∏è Erro: {ve}")
    # Trata qualquer outro tipo de exce√ß√£o
    except Exception as e:
        exibir_subtitulos(f"‚ö†Ô∏è Ocorreu um erro inesperado: {e}")

# Fun√ß√£o para visualizar os servi√ßos agendados
def mostrar_servicos_agendados():
    exibir_subtitulos("\nüìÖ **Servi√ßos Agendados**\n")
     # Verifica se h√° servi√ßos agendados na lista
    if not servicos_agendados:
        exibir_subtitulos("üö´ Nenhum servi√ßo agendado no momento.")
    else:
         # Exibe todos os servi√ßos agendados
        for servico in servicos_agendados:
            print(f"\nüìÜ Data: {servico['Data']}")
            print(f"‚è∞ Hor√°rio: {servico['Hor√°rio']}")
            print(f"üÜî CPF do Cliente: {servico['CPF']}")
            print(f"üöó Placa do Ve√≠culo: {servico['Placa']}")
            print(f"üìù Descri√ß√£o do Servi√ßo: {servico['Descri√ß√£o do Servi√ßo']}")

# Fun√ß√£o para o usu√°rio fazer login na plataforma
def login():
    exibir_subtitulos("\nüîê **Tela de Login**\n")
    while True:
        nome_usuario = input("Nome de usu√°rio: ")
        senha = input("Senha: ")
        
        # Verifica se o usu√°rio e a senha s√£o v√°lidos
        usuario_valido = next((cliente for cliente in clientes if cliente['Usu√°rio'] == nome_usuario and cliente['Senha'] == senha), None)
        
        if usuario_valido:
            # Solicita a placa e o modelo do ve√≠culo
            while True:
                placa = input("Placa do ve√≠culo (7 caracteres): ")
                if len(placa) != 7:
                    exibir_subtitulos("‚ö†Ô∏è A placa deve ter exatamente 7 caracteres.")
                elif not any(veiculo['Placa'] == placa for veiculo in veiculos):
                    exibir_subtitulos("‚ö†Ô∏è Placa n√£o encontrada. Verifique e tente novamente.")
                else:
                    # Verifica se a placa pertence ao ve√≠culo do cliente
                    veiculo_associado = next((veiculo for veiculo in veiculos if veiculo['Placa'] == placa), None)
                    if veiculo_associado:
                        exibir_subtitulos(f"\nüîì Login bem-sucedido! Bem-vindo(a), {usuario_valido['Nome']}!")
                        return True
                    else:
                        exibir_subtitulos("‚ö†Ô∏è A placa informada n√£o corresponde a um ve√≠culo registrado.")
        else:
            exibir_subtitulos("‚ö†Ô∏è Nome de usu√°rio ou senha incorretos. Tente novamente.")
            continuar = input("Deseja tentar novamente? (s/n): ")
            if continuar.lower() != 's':
                break

# Fun√ß√£o para exibir o menu principal com as op√ß√µes de CRUD e outras funcionalidades
def menu():
    while True:
        print("\n‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ")
        print("‚îÇ           SmartConnect Car Atendimento         ‚îÇ")
        print("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§")
        print("‚îÇ                Menu Principal                  ‚îÇ")
        print("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§")
        print("‚îÇ 1. Login                                       ‚îÇ")
        print("‚îÇ 2. Cadastrar Veiculos                          ‚îÇ")
        print("‚îÇ 3. Cadastrar Clientes                          ‚îÇ")
        print("‚îÇ 4. Cadastrar Oficinas                          ‚îÇ")
        print("‚îÇ 5. Cadastrar Funcion√°rios                      ‚îÇ")
        print("‚îÇ 6. Gerenciar Estoque                           ‚îÇ")
        print("‚îÇ 8. Agendar Servi√ßo de Manuten√ß√£o               ‚îÇ")
        print("‚îÇ 9. Mostrar Servi√ßos Agendados                  ‚îÇ")
        print("‚îÇ 0. Sair                                        ‚îÇ")
        print("‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ")

        opcao = input("Escolha uma op√ß√£o (1-9): ")

        match opcao:

            case "1":
                login()
            case "2":
                cadastrar_veiculo()
            case "3":
                cadastrar_cliente()
            case "4":
                cadastrar_oficina()
            case "5":
                cadastrar_funcionario()
            case "6":
                gerenciar_estoque()
            case "7":
                agendar_manutencao()
            case "8":
                mostrar_servicos_agendados()
            case  "0":
                print("üëã Saindo do sistema. At√© a pr√≥xima!")
                break
            case _ :
                print("‚ö†Ô∏è Op√ß√£o inv√°lida. Por favor, escolha um n√∫mero entre 1 e 9.")

menu()
